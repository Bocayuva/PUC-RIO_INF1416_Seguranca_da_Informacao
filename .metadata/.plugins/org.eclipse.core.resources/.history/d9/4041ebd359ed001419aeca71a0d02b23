package main.helper;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;

public class FileCript {

	public static void adicionaFinalArquivo(String filename, String new_line){
      try{
    	  String workingDir = System.getProperty("user.dir");
    	  PrintWriter writer = new PrintWriter(workingDir + "/src/" + filename, "UTF-8");
    	  writer.println(new_line);
    	  writer.close();
      }catch(Exception e){
    	  System.out.println("=> Erro ao gerar a lista de chaves Ãºnicas! ");
      }      

    }
	
	public static byte[] getBytesFromFile(String fileUrl){
		
		InputStream inpStream = null;
		String workingDir = System.getProperty("user.dir");
		File file = new File(workingDir + "/src/" + fileUrl);
		if (!file.isFile()) {
			return null;
		}
		 
        byte[] bFile = new byte[(int) file.length()];
 
        try {
        	
        	inpStream = new FileInputStream(file);
		    for (int i = 0; i < bFile.length; i++) {
		    	inpStream.read(bFile);
	        }
	       	inpStream.close();

        }catch(Exception e){
        	e.printStackTrace();
        }
        
		return bFile;
		
	}
	
	public static void criptoPrivateKey(File f) throws Exception{
		byte[] plainText = "FRASE SECRETA".getBytes("UTF8");
		
		byte[] privateFileBytes = getBytesFromFile("E:/userpriv");
		
		KeyGenerator keyGen  = KeyGenerator.getInstance("DES");
		SecureRandom secRand = SecureRandom.getInstance("SHA1PRNG");
	    secRand.setSeed(plainText);
	    keyGen.init(56, secRand);
	    Key key              = keyGen.generateKey();
	    	    
	    Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
	    cipher.init(Cipher.ENCRYPT_MODE, key);
	    
	    byte[] cipherText = cipher.doFinal(plainText);
	    
	    StringBuffer buf = new StringBuffer();
	    for(int i = 0; i < cipherText.length; i++) {
	       String hex = Integer.toHexString(0x0100 + (cipherText[i] & 0x00FF)).substring(1);
	       buf.append((hex.length() < 2 ? "0" : "") + hex);
	    }
	    buf.toString();
	}
	
}
