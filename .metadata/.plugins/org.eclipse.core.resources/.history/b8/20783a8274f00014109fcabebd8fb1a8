package main.helper;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JTable;

import main.business.TanList;
import main.business.Usuario;
import main.dao.TanListDao;
import main.dao.UsuarioDao;

public class Utility {

	public static JButton[] geraBotoes(){
		
		JButton[] botoes = new JButton[5];
		ArrayList<Integer> list = geraRandom(0,9);
		
		botoes[0] = new JButton();
		botoes[1] = new JButton();
		botoes[2] = new JButton();
		botoes[3] = new JButton();
		botoes[4] = new JButton();
		
		botoes[0].setText(list.get(0).toString() + " ou " + list.get(1).toString());
		botoes[1].setText(list.get(2).toString() + " ou " + list.get(3).toString());
		botoes[2].setText(list.get(4).toString() + " ou " + list.get(5).toString());
		botoes[3].setText(list.get(6).toString() + " ou " + list.get(7).toString());
		botoes[4].setText(list.get(8).toString() + " ou " + list.get(9).toString());
				
		return botoes;
		
	}
	
	private static ArrayList<Integer> geraRandom(Integer inicio, Integer fim){
		ArrayList<Integer> list = new ArrayList<Integer>();
        for (int i=inicio; i<=fim; i++) {
            list.add(new Integer(i));
        }
        Collections.shuffle(list);
		return list;
	}
	
	
	public static String geraRandomString() {
	    Random rand = new Random();
	    String randomGerado = "";
	    for (int i = 0; i < 9; i++) {
			randomGerado += rand.nextInt(9);
		}
		return randomGerado;
	}
	
	public static String geraSenha(String senha){
		
		MessageDigest messageDigest = null;
		try {
			messageDigest = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e1) {
			e1.printStackTrace();
		}
		byte[] senhaTxt = null;
		try {
			senhaTxt = senha.getBytes("UTF8");
		} catch (UnsupportedEncodingException e2) {
			e2.printStackTrace();
		}
	    messageDigest.update(senhaTxt);
	    byte [] digest = messageDigest.digest();
	    
	    StringBuffer buf = new StringBuffer();
	    for(int i = 0; i < digest.length; i++) {
	       String hex = Integer.toHexString(0x0100 + (digest[i] & 0x00FF)).substring(1);
	       buf.append((hex.length() < 2 ? "0" : "") + hex);
	    }
	    
		return buf.toString();
		
	}

	public static boolean verificaSenhaTeclado(String salt, String pass_digited, String user_pwd) {
		pass_digited = pass_digited.substring(0, pass_digited.length() - 1);
		String[] elementos = pass_digited.split("_");
		
		List<String> lista = new ArrayList<String>();
		lista.add(elementos[0]);
		lista.add(elementos[1]);
		
		int n =  1;
		int num_digitos = (elementos.length) / 2;
		int left = 2;
		int right = 4;
		boolean retorno = false;
		while (n < num_digitos) {
			int tam_lista = lista.size();
			for (int i = 0; i < tam_lista; i++) {
				for (int j = left; j < right; j++) {
					lista.add(lista.get(i) + elementos[j]);
					if ( (lista.get(i) + elementos[j]).length() >= num_digitos  ) {
						String senha_dig = geraSenha(lista.get(i) + elementos[j] + salt);
						if (user_pwd.equals(senha_dig)) {
							retorno = true;
							break;
						}	
					}
				}
			}
			left  += 2;
			right += 2;
			n     += 1;
		}
		
		return retorno;
	}

	public static List<TanList> getTanItem(Usuario usuario) {
		List<TanList> tanItens = new ArrayList<TanList>();
		TanListDao tanListDao = new TanListDao();
		tanListDao.buscarItens(tanItens, usuario.getId());	
		return tanItens;
	}
	
	public static void bloquearUsuario(Usuario usuario){
		Calendar calendar = Calendar.getInstance();
		Timestamp data_block = new Timestamp(calendar.getTime().getTime());
		data_block.setTime(data_block.getTime() + 2*60*1000);
		usuario.setBlocked_at(data_block);
		Usuario.update(usuario);
	}

	public static boolean VerificaPadraoInvalido(char[] password) {
		/* Verifica padroes invalidos na senha */
		char last_chr = password[0];
		for (int i = 1; i < password.length; i++) {
			if (password[i] == last_chr) {
				return true;
			}
			if (password[i] == (last_chr + 1)) {
				return true;
			}
			if (password[i] == (last_chr - 1)) {
				return true;
			}
			last_chr = password[i];
		}
		return false;
	}

	public static String geraRandomTan() {
		String randTan = "";
		Random rand = new Random();				
		for (int i = 0; i < 5; i++) {			
			randTan += Character.toString((char) (rand.nextInt(91 - 65) + 65));
		}
		return randTan;
	}
	
	public static int qtdeUsuariosSistema(){
		UsuarioDao usuDao = new UsuarioDao();
		return usuDao.totalUsuarios();
	}

	public static byte[] getBytesFromFile(String fileUrl){
		
		InputStream inpStream = null;
		File file = new File(fileUrl);
		if (!file.isFile()) {
			return null;
		}
		
		if (file.length() > Integer.MAX_VALUE) {
			return null;
		}
		 
        byte[] bFile = new byte[(int) file.length()];
         
        int offset  = 0;
		int numRead = 0;		
        try {
        	
        	inpStream = new FileInputStream(file);
		    while (offset < bFile.length
					&& (numRead=inpStream.read(bFile, offset, bFile.length-offset)) >= 0) {
				offset += numRead;
			}
	       	inpStream.close();

        }catch(Exception e){
        	e.printStackTrace();
        }
        
		return bFile;
		
		
		
	}
	

	public static void adicionaFinalArquivo(String filename, String new_line){
		
      try{
    	  String workingDir = System.getProperty("user.dir");
    	  PrintWriter writer = new PrintWriter(workingDir + "/src/" + filename, "UTF-8");
    	  writer.println(new_line);
    	  writer.close();
      }catch(Exception e){
    	  System.out.println("=> Erro ao gerar a lista de chaves únicas! ");
      }      

    }
	
	public static JTable MontaGrid(String fileDecList){
		
		String[] columns = { "Nome segredo", "Nome código", "Status" };
		String[][] data= new String[100][100];
		List<String> fileList = Utility.MontaFileList(fileDecList);
		for (int i=0; i<fileList.size(); i++) {
			if(fileList.get(i).length()>1) {
				data[i][0] = fileList.get(i).substring(0, fileList.get(i).indexOf(" "));
				data[i][1] = fileList.get(i).substring(fileList.get(i).indexOf(" "), fileList.get(i).length());
				try {
					String extensao = data[i][0].substring(data[i][0].indexOf("."), data[i][0].length());
					byte[] arquivo = arq.decriptaArquivo(data[i][1].trim(), extensao, data[i][1].trim(), 1);
					if(arquivo==null) {
						data[i][2] = "NOT OK";
					} else {
						data[i][2] = "OK";
					}
					if(!arq.checaIntegridade(data[i][1].trim(), arquivo)) {
						data[i][3]= "NOT OK";
					} else {
						data[i][3]= "OK";
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}
		table = new JTable(data, columns);
		TableColumn columnA = table.getColumn("NOME");
		columnA.setMinWidth(255);
		columnA.setMaxWidth(255);
		TableColumn columnB = table.getColumn("NOME ENCRIPTADO");
		columnB.setMinWidth(255);
		columnB.setMaxWidth(255);
		TableColumn columnC = table.getColumn("INTEGRIDADE");
		columnC.setMinWidth(70);
		columnC.setMaxWidth(70);
		TableColumn columnD = table.getColumn("AUTENTICIDADE");
		columnD.setMinWidth(70);
		columnD.setMaxWidth(70);
		table.setAutoResizeMode( JTable.AUTO_RESIZE_ALL_COLUMNS );
		JScrollPane scrollpane = new JScrollPane(table);
		scrollpane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS); 
		scrollpane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); 
		
	}

	private static List<String> MontaFileList(String fileDecList) {
		// 
		return null;
	}
		
	
}
