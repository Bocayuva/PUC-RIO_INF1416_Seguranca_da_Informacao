package main.helper;

import java.io.FileOutputStream;
import java.security.Key;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.spec.EncodedKeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.List;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ScrollPaneConstants;

import main.business.Usuario;


public class FileCript {
	
	private PrivateKey privKey;
	private PublicKey  pubKey;
	private Key symKey;
	private String folderUrl;
	private String fileDecript;
	private String keyphrase;
	
	public FileCript(String keyphrase, String fileUrl, String folderUrl){
		
		setFolderUrl(folderUrl);
		this.setKeyphrase(keyphrase);
		try {
			setPrivateKey(fileUrl);
		} catch (Exception e) {
			e.printStackTrace();
		}
		setSymKey();
	}
		
	public void setPrivateKey(String fileUrl) throws Exception{
		
		byte[] plainText      = null;
		PrivateKey privateKey = null;
		
        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
		byte[] cipherText = Utility.getBytesFromFile(fileUrl);
		
		Key key   = Utility.getKeyFromRandom(this.getKeyphrase().getBytes());
		
	    cipher.init(Cipher.DECRYPT_MODE, key);
	    try{
	    	plainText = cipher.doFinal(cipherText);
	    }catch(Exception e){
	    	e.printStackTrace();
	    }	    
		KeyFactory keyFactory         = KeyFactory.getInstance("RSA");
		EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(plainText);
		
		try {
			privateKey = keyFactory.generatePrivate(privateKeySpec);
		} catch (Exception e) {
			e.printStackTrace();
		}
		this.privKey = privateKey;
	}
	
	public PrivateKey getPrivKey(){
		return this.privKey;
	}
	
	public void setPubKey(Usuario usuario){
		PublicKey publicKey = null;
		try{
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(usuario.getUser_url_pub());
			publicKey = keyFactory.generatePublic(publicKeySpec);
		}catch(Exception e){
			e.printStackTrace();
		}
		this.pubKey = publicKey;
	}
	
	public PublicKey getPubKey(){
		return this.pubKey;
	}
	
	public String getFolderUrl() {
		return folderUrl;
	}

	public void setFolderUrl(String folderUrl) {
		this.folderUrl = folderUrl;
	}
	
	public void setSymKey() {
		
		byte[] seed = null;
		byte[] indexEnv = Utility.getBytesFromFile(this.getFolderUrl() + "/index.env");
		
		try{
			Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		    cipher.init(Cipher.DECRYPT_MODE, this.getPrivKey());
		    seed = cipher.doFinal(indexEnv);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		this.symKey = Utility.getKeyFromRandom(seed);
	}
	
	public Key getSymKey() {
		return this.symKey;
	}	

	public String getFileDecript() {
		return fileDecript;
	}

	public void setFileDecript(String fileDecript) {
		this.fileDecript = fileDecript;
	}

	public String getKeyphrase() {
		return keyphrase;
	}

	public void setKeyphrase(String keyphrase) {
		this.keyphrase = keyphrase;
	}

	
	public boolean checarAutenticidadeIntegridade(){
		byte[] indexAsd = Utility.getBytesFromFile(this.getFolderUrl() + "/index.asd");
		byte[] bSignature = null;
		try{
			Signature signature = Signature.getInstance("MD5WithRSA");
		    signature.initSign(this.getPrivKey());
		    signature.update(indexAsd);		    
		    bSignature = signature.sign();
		    
		    signature.initVerify(this.getPubKey());
		    signature.update(indexAsd);
		    
		    if(signature.verify(bSignature)) {
				return true;
		    }
		    return false;
		}catch(Exception e){
			e.printStackTrace();
		}
		return false;
	}
	
	public void decriptaArquivo() throws Exception {
		
		byte[] plainText = null;
		byte[] indexEnc = Utility.getBytesFromFile(this.getFolderUrl() + "/index.enc");
		try{
			Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
		    cipher.init(Cipher.DECRYPT_MODE, this.getSymKey());
		    plainText = cipher.doFinal(indexEnc);
		}catch(Exception e){
			e.printStackTrace();
		}
		String outputFile = this.getFolderUrl() + "/index.txt";
		FileOutputStream outputStream = new FileOutputStream(outputFile);
        outputStream.write(plainText);
        outputStream.close();
        this.setFileDecript(outputFile);
		
	}
	
	private static String getDigest(byte[] digest){
		
        StringBuffer buf = new StringBuffer();
        for(int i = 0; i < digest.length; i++) {
           String hex = Integer.toHexString(0x0100 + (digest[i] & 0x00FF)).substring(1);
           buf.append((hex.length() < 2 ? "0" : "") + hex);
        }
        return buf.toString();
        
    }
	
	
	public JTable MontaGrid(){
		JTable table = null;
		String[] columns = { "Nome segredo", "Nome cÃ³digo", "Status" };
		String[][] data= new String[100][3];
		List<String> fileList = Utility.MontaFileList(this.getFileDecript());
		List<FileUnitCript> fileUList = new ArrayList<FileUnitCript>();
		for (int i=0; i<fileList.size(); i++) {
			if(fileList.get(i).length()>1) {
				String[] full_name = fileList.get(i).split(" ");
				data[i][0] = full_name[0];
				data[i][1] = full_name[1];
				try {
					FileUnitCript fileU = new FileUnitCript();
					fileU.setFolderUrl(this.getFolderUrl());
					fileU.setNomeCodigo(full_name[0]);
					fileU.setNomeSecreto(full_name[1]);
					fileU.setPubKey(this.getPubKey());
					fileU.setPrivKey(this.getPrivKey());
					if (fileU.checarAutenticidadeIntegridade()) {
						fileU.setStatus("OK");
						fileU.decriptoFile();
						
					}else{
						fileU.setStatus("NOT OK");
					}
					data[i][1] = fileU.getStatus();
					fileUList.add(fileU);
						
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}
		table = new JTable(data, columns);
		table.setAutoResizeMode( JTable.AUTO_RESIZE_ALL_COLUMNS );
		
		return table;
	}

	
}
